{"version":3,"sources":["../../src/radio/radio-group.ts"],"names":[],"mappings":"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","file":"radio-group.js","sourceRoot":"","sourcesContent":["import { Component, Input, EventEmitter, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class ElRadioGroup implements ControlValueAccessor {\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {   // todo, is discarded.\n    console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.')\n  }\n   elDisabled: boolean = false\n   buttonSize: string\n   fillColor: string = '#20a0ff'\n   textColor: string = '#ffffff'\n   model: any\n   modelChange: EventEmitter<any> = new EventEmitter<any>()\n  \n  subscriber: Function[] = []\n/**\n * @param {?} nextValue\n * @return {?}\n */\nchangeHandle(nextValue: string | number): void {\n    setTimeout(() => {\n      this.model = nextValue\n      this.modelChange.emit(nextValue)\n      this.controlChange(nextValue)\n      this.subscriber.forEach(sub => sub())\n    }, 0)\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.model = value\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void {\n    this.controlChange = fn\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: Function): void {\n    this.controlTouch = fn\n  }\nprivate controlChange: Function = () => {}\nprivate controlTouch: Function = () => {}\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-radio-group',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ElRadioGroup),\n    multi: true\n  }],\n  template: `\n    <div class=\"el-radio-group\" role=\"radiogroup\">\n      <ng-content></ng-content>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'elDisabled': [{ type: Input },],\n'buttonSize': [{ type: Input, args: ['size', ] },],\n'fillColor': [{ type: Input, args: ['fill', ] },],\n'textColor': [{ type: Input },],\n'model': [{ type: Input },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nElRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElRadioGroup.ctorParameters;\n/** @type {?} */\nElRadioGroup.propDecorators;\n/** @type {?} */\nElRadioGroup.prototype.elDisabled;\n/** @type {?} */\nElRadioGroup.prototype.buttonSize;\n/** @type {?} */\nElRadioGroup.prototype.fillColor;\n/** @type {?} */\nElRadioGroup.prototype.textColor;\n/** @type {?} */\nElRadioGroup.prototype.model;\n/** @type {?} */\nElRadioGroup.prototype.modelChange;\n/** @type {?} */\nElRadioGroup.prototype.subscriber;\n/** @type {?} */\nElRadioGroup.prototype.controlChange;\n/** @type {?} */\nElRadioGroup.prototype.controlTouch;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}