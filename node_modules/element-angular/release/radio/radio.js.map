{"version":3,"sources":["../../src/radio/radio.ts"],"names":[],"mappings":"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","file":"radio.js","sourceRoot":"","sourcesContent":["import {\n  Component, Input, Output, EventEmitter, ElementRef, Optional, OnInit, forwardRef,\n} from '@angular/core';\nimport { ElRadioGroup } from './radio-group';\nimport { isParentTag, removeNgTag } from '../shared/utils/index';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class ElRadio implements OnInit, ControlValueAccessor {\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {   // todo, is discarded.\n    console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.')\n  }\n   elDisabled: boolean = false\n   label: string | number = ''\n   nativeName: string = ''\n   model: any\n   modelChange: EventEmitter<any> = new EventEmitter<any>()\n  \n  isFocus: boolean = false\n  parentIsGroup: boolean = false\n/**\n * @param {?} rootGroup\n * @param {?} el\n */\nconstructor(\nprivate rootGroup: ElRadioGroup,\nprivate el: ElementRef,\n  ) {\n  }\n/**\n * @return {?}\n */\nchangeHandle(): void {\n    if (this.parentIsGroup) {\n      return this.rootGroup.changeHandle(this.label)\n    }\n    this.model = this.label\n    this.modelChange.emit(this.label)\n    this.controlChange(this.label)\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    const /** @type {?} */ nativeElement = this.el.nativeElement\n    const /** @type {?} */ update = () => {\n      this.elDisabled = this.rootGroup.elDisabled\n      this.model = this.rootGroup.model\n    }\n    this.parentIsGroup = isParentTag(nativeElement, 'el-radio-group')\n    removeNgTag(nativeElement)\n    \n    if (this.parentIsGroup && this.rootGroup) {\n      update()\n      this.rootGroup.subscriber.push(update)\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.model = value\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void {\n    this.controlChange = fn\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: Function): void {\n    this.controlTouch = fn\n  }\nprivate controlChange: Function = () => {}\nprivate controlTouch: Function = () => {}\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-radio',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ElRadio),\n    multi: true\n  }],\n  template: `\n    <label class=\"el-radio\" role=\"radio\" tabindex=\"0\">\n      <span class=\"el-radio__input\"\n        style=\"float: left;\"\n        [class.is-disabled]=\"elDisabled\"\n        [class.is-checked]=\"model === label\"\n        [class.is-focus]=\"isFocus\">\n        <span class=\"el-radio__inner\"></span>\n        <input class=\"el-radio__original\" type=\"radio\"\n          [value]=\"label\" [name]=\"nativeName\" [disabled]=\"elDisabled\"\n          (focus)=\"isFocus = true\" (blur)=\"isFocus = false\"\n          [ngModel]=\"model\" (ngModelChange)=\"changeHandle()\">\n      </span>\n      <span class=\"el-radio__label\"><ng-content></ng-content></span>\n    </label>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'elDisabled': [{ type: Input },],\n'label': [{ type: Input },],\n'nativeName': [{ type: Input, args: ['name', ] },],\n'model': [{ type: Input },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElRadio_tsickle_Closure_declarations() {\n/** @type {?} */\nElRadio.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElRadio.ctorParameters;\n/** @type {?} */\nElRadio.propDecorators;\n/** @type {?} */\nElRadio.prototype.elDisabled;\n/** @type {?} */\nElRadio.prototype.label;\n/** @type {?} */\nElRadio.prototype.nativeName;\n/** @type {?} */\nElRadio.prototype.model;\n/** @type {?} */\nElRadio.prototype.modelChange;\n/** @type {?} */\nElRadio.prototype.isFocus;\n/** @type {?} */\nElRadio.prototype.parentIsGroup;\n/** @type {?} */\nElRadio.prototype.controlChange;\n/** @type {?} */\nElRadio.prototype.controlTouch;\n/** @type {?} */\nElRadio.prototype.rootGroup;\n/** @type {?} */\nElRadio.prototype.el;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}