{"version":3,"sources":["../../src/tree/tree.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAU,MAAA,eAAA,CAAA;AACnB,OAAO,EAAE,aAAA,EAAc,MAAA,SAAA,CAAA;AACvB,OAAO,EAAE,WAAA,EAA8B,MAAA,cAAA,CAAA;AAQvC,MAEC,aAAA,SAAA,WAAA;IADD;QAEI,KAAK,EAAE,CAAA;QAGT,kBAAa,GAGwB,GAAG,EAAA,CAAG,CAAA;YAFzC,cAAc,EAGE,IAAA,CAAK,cAAC,CAAc,IAAC,CAAI,IAAC,CAAI;YAF9C,iBAAiB,EAGE,IAAA,CAAK,aAAC,CAAa,IAAC,CAAI,IAAC,CAAI;YAFhD,kBAAkB,EAGE,IAAA,CAAK,cAAC,CAAc,IAAC,CAAI,IAAC,CAAI;YAFlD,gBAAgB,EAGE,IAAA,CAAK,gBAAC,CAAgB,IAAC,CAAI,IAAC,CAAI;SAFnD,CAGC,CAAA;IAVF,CAAC;IAQH;;OAEG;IACH,cACG;QAAC,EAAE,CAAC,CAAC,CACC,IAAC,CAAI,YAAC,CAAY;YAAC,MAAA,CAAO,EAAA,CAAA;QAA/B,MAAM,CACC,aAAA,CAAc,cAAC,CAAc,IAAC,CAAI,UAAC,CAAU,CAAA;IAAtD,CAAC;IACH;;OAEG;IACH,gBADG;QAEC,aAAa,CADC,iBAAC,CAAiB,IAAC,CAAI,UAAC,CAAU,CAAA;IAElD,CAAC;IACH;;;OAGG;IACH,cAJG,CAAA,EAAA;QAKC,IAAI,CAJC,UAAC,GAAY,aAAA,CAAc,kBAAC,CAAkB,EAAC,EAAG,IAAA,CAAK,UAAC,EAAW,IAAA,CAAK,SAAC,CAAS,CAAA;IAKzF,CAAC;IACH;;;OAGG;IACH,aAPG,CAAA,EAAA;QAQC,EAAE,CAAC,CAAC,CAPC,IAAC,CAAI,YAAC,CAAY;YAAC,MAAA,CAAA;QAQxB,IAAI,CAPC,UAAC,GAAY,aAAA,CAAc,iBAAC,CAAiB,EAAC,EAAG,IAAA,CAAK,UAAC,CAAU,CAAA;IAQxE,CAAC;IACH;;;OAGG;IACH,OAVG,CAAA,IAAA;QAWC,IAAI,CAVC,WAAC,CAAW,IAAC,CAAI,IAAC,CAAI,CAAA;IAW7B,CAAC;;AARI,iBAAA,GAAoC;IAW3C,EAVE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAWvB,QAAQ,EAVE,SAAA;gBAWV,QAAQ,EAVE;;;;;;;;;GAmBT;aACF,EAVC,EAAG;CAWJ,CAVC;AAWF;;GAEG;AAXF,qBAAA,GAAA,GAAA,EAAA,CAAA,EAaA,CAAC;AAGF;IACA,gBAAgB;IAChB,MAAM,CAAC,UAAU,CAAC;IAClB;;;OAGG;IACH,MAAM,CAAC,cAAc,CAAC;IACtB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC;AAC/B,CAAC","file":"tree.js","sourceRoot":"","sourcesContent":["import { Component } from '@angular/core';\nimport { ModelStandard } from './utils';\nimport { ElTreeProps, ElTreeModelEvent } from './tree-props';\n\nexport type UserSafeHooks = {\n  findAllChecked: () => string[],\n  removeAllChecked: () => void,\n  updateItemChecked: (id: string | number) => void,\n  updateItemExpanded: (id: string | number) => void,\n}\nexport class ElTree extends ElTreeProps {\nconstructor(\n  ) {\n    super()\n  }\n  \n  userSafeHooks: () => UserSafeHooks = () => ({\n    findAllChecked: this.findAllChecked.bind(this),\n    updateItemChecked: this.updateChecked.bind(this),\n    updateItemExpanded: this.updateExpanded.bind(this),\n    removeAllChecked: this.removeAllChecked.bind(this),\n  })\n/**\n * @return {?}\n */\nfindAllChecked(): string[] {\n    if (!this.showCheckbox) return []\n    return ModelStandard.FindAllChecked(this.identModel)\n  }\n/**\n * @return {?}\n */\nremoveAllChecked(): void {\n    ModelStandard.LoopRemoveChecked(this.identModel)\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nupdateExpanded(id: string | number): void {\n    this.identModel = ModelStandard.DeepUpdateExpanded(id, this.identModel, this.accordion)\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nupdateChecked(id: string | number): void {\n    if (!this.showCheckbox) return\n    this.identModel = ModelStandard.DeepUpdateChecked(id, this.identModel)\n  }\n/**\n * @param {?} next\n * @return {?}\n */\nemitter(next: ElTreeModelEvent): void {\n    this.modelChange.emit(next)\n  }\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-tree',\n  template: `\n    <div class=\"el-tree\" role=\"tree\">\n      <el-tree-item *ngFor=\"let item of identModel\"\n        [model]=\"item\" [indent]=\"indent\">\n      </el-tree-item>\n      <div class=\"el-tree__empty-block\" *ngIf=\"!identModel && !identModel.length\">\n        <span class=\"el-tree__empty-text\">{{ emptyText }}</span>\n      </div>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ElTree_tsickle_Closure_declarations() {\n/** @type {?} */\nElTree.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElTree.ctorParameters;\n/** @type {?} */\nElTree.prototype.userSafeHooks;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}