{"version":3,"sources":["../../src/tree/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourceRoot":"","sourcesContent":["import { ElTreeModelData } from './tree-props';\n\nexport const /** @type {?} */ notEmptyArray = (arr?: any): boolean => {\n  if (!Array.isArray(arr)) return false\n  return arr && arr.length > 0\n}\n\nexport const /** @type {?} */ makeRandomID = () => Math.random().toString(16).slice(-8)\n\nexport type ModelStandardInit = {\n  initDepth: number,\n  defaultExpandAll: boolean,\n  defaultExpandedKeys: Array<string | number>,\n  defaultCheckedKeys: Array<string | number>,\n}\nexport class ModelStandard {\n/**\n * @param {?} models\n * @return {?}\n */\nstatic LoopRemoveChecked(models: ElTreeModelData[]): void {\n    models.forEach(item => {\n      item.checked = false\n      if (item.children && item.children.length) {\n        ModelStandard.LoopRemoveChecked(item.children)\n      }\n    })\n  }\n/**\n * @param {?} id\n * @param {?} models\n * @param {?} accordion\n * @return {?}\n */\nstatic DeepUpdateExpanded(id: string | number, models: ElTreeModelData[], accordion: boolean): ElTreeModelData[] {\n    if (!models || !models.length) return []\n    const /** @type {?} */ index = models.findIndex(item => item.id === id)\n  \n    if (index === -1) return models.map(item =>\n      Object.assign(item, {\n        children: ModelStandard.DeepUpdateExpanded(id, item.children || [], accordion)\n      }))\n  \n    // in accordion mode, only open one.\n    // dont return new object, new object will cause the component to be re rendered,\n    // and the current animation may be lost.\n    const /** @type {?} */ nextExpanded: boolean = !models[index].expanded\n    if (accordion) {\n      models = models.map(item => Object.assign(item, {\n        expanded: false\n      }))\n    }\n    models[index].expanded = nextExpanded\n    return models\n  }\n/**\n * @param {?} id\n * @param {?} models\n * @return {?}\n */\nstatic DeepUpdateChecked(id: string | number, models: ElTreeModelData[]): ElTreeModelData[] {\n    if (!models || !models.length) return []\n    const /** @type {?} */ index = models.findIndex(item => item.id === id)\n  \n    if (index === -1) {\n      models.forEach(item => {\n        const /** @type {?} */ nextChildren: ElTreeModelData[] = ModelStandard.DeepUpdateChecked(id, item.children || [])\n        const /** @type {?} */ nextIndeterminate: boolean = !!nextChildren.find(item => item.checked || item._indeterminate)\n        const /** @type {?} */ allChecked: boolean = nextChildren.length > 0 && !nextChildren.find(item => !item.checked)\n      \n        item._indeterminate = allChecked ? false : nextIndeterminate\n        item.children = nextChildren\n      \n        // leaf have have no subelements so no need to be updatedã€‚\n        // leaf element is not affected by subelements.\n        if (nextChildren.length) {\n          item.checked = allChecked\n        }\n      })\n      return models\n    }\n  \n    models[index].checked = !models[index].checked\n    models[index]._indeterminate = false\n    if (models[index].children && models[index].children.length > 0) {\n      ModelStandard.SetChildrenChecked(models[index].children, models[index].checked)\n    }\n    return models\n  }\n/**\n * @param {?} models\n * @param {?} checked\n * @return {?}\n */\nstatic SetChildrenChecked(models: ElTreeModelData[], checked: boolean): void {\n    models.forEach(item => {\n      item.checked = checked\n      if (item.children && item.children.length) {\n        ModelStandard.SetChildrenChecked(item.children, checked)\n      }\n    })\n  }\n/**\n * @param {?} models\n * @return {?}\n */\nstatic FindAllChecked(models: ElTreeModelData[]): string[] {\n    const /** @type {?} */ checkedLabels = models.reduce((labels: string[] = [], item): any => {\n      const /** @type {?} */ childrenLabels = (item.children && item.children.length)\n        ? ModelStandard.FindAllChecked(item.children)\n        : []\n      return labels.concat(...childrenLabels, item.checked ? item.label : [])\n    }, [])\n    return checkedLabels\n  }\n/**\n * @param {?} init\n */\nconstructor(private init: ModelStandardInit) {\n  }\n/**\n * @param {?} models\n * @return {?}\n */\nfilterModel(models: ElTreeModelData[]): ElTreeModelData[] {\n    return this.updateDepthIdent(models, this.init.initDepth)\n  }\n/**\n * @param {?} models\n * @param {?} depth\n * @return {?}\n */\nprivate updateDepthIdent(models: ElTreeModelData[], depth: number)\n  : ElTreeModelData[] {\n    return models.map(item => {\n      const /** @type {?} */ nextID: string | number = item.id || makeRandomID()\n      const /** @type {?} */ nextChildren: ElTreeModelData[] = notEmptyArray(item.children)\n        ? this.updateDepthIdent(item.children, depth + 1) : []\n      const /** @type {?} */ nextIndeterminate: boolean = !!nextChildren.find(item => item.checked || item._indeterminate)\n      const /** @type {?} */ allChecked: boolean = nextChildren.length > 0 && !nextChildren.find(item => !item.checked)\n      return Object.assign({}, item, {\n        id: nextID,\n        checked: allChecked || this.isChecked(nextID, item),\n        _level: depth ? depth + 1 : 1,\n        expanded: this.isExpanded(nextID, item),\n        _indeterminate: allChecked ? false : nextIndeterminate,\n        children: nextChildren,\n      })\n    })\n  }\n/**\n * @param {?} id\n * @param {?} item\n * @return {?}\n */\nprivate isExpanded(id: string | number, item: ElTreeModelData): boolean {\n    if (item.expanded === true) return true\n    if (this.init.defaultExpandAll) return true\n    if (!this.init.defaultExpandedKeys.length) return false\n    return !!this.init.defaultExpandedKeys.find(key => key === id)\n  }\n/**\n * @param {?} id\n * @param {?} item\n * @return {?}\n */\nprivate isChecked(id: string | number, item: ElTreeModelData): boolean {\n    if (item.checked === true) return true\n    if (!this.init.defaultCheckedKeys.length) return false\n    return !!this.init.defaultCheckedKeys.find(key => key === id)\n  }\n}\n\nfunction ModelStandard_tsickle_Closure_declarations() {\n/** @type {?} */\nModelStandard.prototype.init;\n}\n\n"]}