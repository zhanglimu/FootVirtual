{"version":3,"sources":["../../src/card/card.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,uBAAA,EAAyB,YAAA,EAA0B,MAAA,eAAA,CAAA;AAC9E,OAAO,EAAa,YAAA,EAAa,MAAA,2BAAA,CAAA;AACjC,MAEC;IAGD;;OAEG;IACH,YACY,SAAW;QAAX,cAAA,GAAA,SAAA,CAAW;QALpB,cAAS,GAEW,EAAA,CAAA;IAKrB,CAAC;IACH;;OAEG;IACH,iBAFG;QAGC,MAAM,CAFC,IAAA,CAAK,SAAC,CAAS,wBAAC,CAAwB,IAAC,CAAI,SAAC,CAAS,CAAA;IAGhE,CAAC;;AAAI,iBAAA,GAAoC;IAG3C,EAFE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA;gBAGvB,QAAQ,EAFE,SAAA;gBAGV,eAAe,EAFE,uBAAA,CAAwB,MAAC;gBAG1C,QAAQ,EAFE;;;;;;;;;;;;;;;GAiBT;aACF,EAFC,EAAG;CAGJ,CAFC;AAGF;;GAEG;AAHF,qBAAA,GAAA,GAAA,EAAA,CAAA;IAKD,EAAC,IAAI,EAAE,YAAY,GAAG;CACrB,CAAC;AAHK,qBAAA,GAAyD;IAKhE,QAZE,EAQQ,CAAA,EAAG,IAAA,EAAM,YAAA,EAAc,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE;IAKtD,WAAW,EAJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,QAAE,EAAQ,EAAG,EAAE;IAKlD,WAAW,EAJE,CAAA,EAAG,IAAA,EAAM,KAAA,EAAO,IAAA,EAAM,CAAA,YAAE,EAAY,EAAG,EAAE;CAKrD,CAJC;AAOF;IACA,gBAAgB;IAChB,MAAM,CAAC,UAAU,CAAC;IAClB;;;OAGG;IACH,MAAM,CAAC,cAAc,CAAC;IACtB,gBAAgB;IAChB,MAAM,CAAC,cAAc,CAAC;IACtB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;IACxB,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;IAC3B,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;IAC3B,gBAAgB;IAChB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;AAC3B,CAAC","file":"card.js","sourceRoot":"","sourcesContent":["import { Component, Input, ChangeDetectionStrategy, ContentChild, TemplateRef } from '@angular/core';\nimport { SafeStyle, DomSanitizer } from '@angular/platform-browser';\nexport class ElCard {\n  \n   header: TemplateRef<any>\n   headerStr: string\n   bodyStyle: string = ''\n/**\n * @param {?} sanitizer\n */\nconstructor(\nprivate sanitizer: DomSanitizer,\n  ) {\n  }\n/**\n * @return {?}\n */\nmakeSafebodyStyle(): SafeStyle {\n    return this.sanitizer.bypassSecurityTrustStyle(this.bodyStyle)\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-card',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"el-card\">\n      <div class=\"el-card__header\" *ngIf=\"header || headerStr\">\n        <ng-container *ngIf=\"header\">\n          <ng-template [ngTemplateOutlet]=\"header\">\n          </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"!header\">\n          {{headerStr}}\n        </ng-container>\n      </div>\n      <div class=\"el-card__body\" [style]=\"makeSafebodyStyle()\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'header': [{ type: ContentChild, args: ['header', ] },],\n'headerStr': [{ type: Input, args: ['header', ] },],\n'bodyStyle': [{ type: Input, args: ['body-style', ] },],\n};\n}\n\nfunction ElCard_tsickle_Closure_declarations() {\n/** @type {?} */\nElCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElCard.ctorParameters;\n/** @type {?} */\nElCard.propDecorators;\n/** @type {?} */\nElCard.prototype.header;\n/** @type {?} */\nElCard.prototype.headerStr;\n/** @type {?} */\nElCard.prototype.bodyStyle;\n/** @type {?} */\nElCard.prototype.sanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}