{"version":3,"sources":["../../src/checkbox/checkbox-group.ts"],"names":[],"mappings":"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","file":"checkbox-group.js","sourceRoot":"","sourcesContent":["import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nexport class ElCheckboxGroup implements OnChanges, ControlValueAccessor {\n  \n   model: any[] = []\n   size: string\n   fill: string = '#20a0ff'\n   textColor: string = '#ffffff'\n   min: number = 0\n   max: number = 1000\n   modelChange: EventEmitter<any> = new EventEmitter<any>()\n  \n  // children update handle\n  subscriber: Function[] = []\n/**\n * @param {?} nextValue\n * @return {?}\n */\nchangeModel(nextValue: any): void {\n    setTimeout(() => {\n      this.model = nextValue\n      this.modelChange.emit(nextValue)\n      this.controlChange(nextValue)\n      this.subscriber.forEach(sub => sub())\n    }, 0)\n  }\n/**\n * @param {?} t\n * @param {?} label\n * @return {?}\n */\nupdateModelFromChildren(t: boolean, label: string): void {\n    // add label value\n    if (t && this.model.indexOf(label) === -1) {\n      if (this.model.length >= this.max) return\n      this.model.push(label)\n    }\n    // remove label value\n    if (!t && this.model.indexOf(label) > -1) {\n      if (this.model.length < this.min) return\n      this.model = this.model.map(v => v === label ? null : v)\n        .filter(v => v)\n    }\n    // synchronize host\n    this.changeModel(this.model)\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if (!changes || !changes.model) return\n    if (changes.model.isFirstChange()) return\n    this.changeModel(changes.model.currentValue)\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.model = value\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: Function): void {\n    this.controlChange = fn\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: Function): void {\n    this.controlTouch = fn\n  }\nprivate controlChange: Function = () => {}\nprivate controlTouch: Function = () => {}\n  \nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-checkbox-group',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ElCheckboxGroup),\n    multi: true\n  }],\n  template: `\n    <div class=\"el-checkbox-group\" role=\"group\" aria-label=\"checkbox-group\">\n      <ng-content></ng-content>\n    </div>\n  `,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'model': [{ type: Input },],\n'size': [{ type: Input },],\n'fill': [{ type: Input },],\n'textColor': [{ type: Input, args: ['text-color', ] },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElCheckboxGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nElCheckboxGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElCheckboxGroup.ctorParameters;\n/** @type {?} */\nElCheckboxGroup.propDecorators;\n/** @type {?} */\nElCheckboxGroup.prototype.model;\n/** @type {?} */\nElCheckboxGroup.prototype.size;\n/** @type {?} */\nElCheckboxGroup.prototype.fill;\n/** @type {?} */\nElCheckboxGroup.prototype.textColor;\n/** @type {?} */\nElCheckboxGroup.prototype.min;\n/** @type {?} */\nElCheckboxGroup.prototype.max;\n/** @type {?} */\nElCheckboxGroup.prototype.modelChange;\n/** @type {?} */\nElCheckboxGroup.prototype.subscriber;\n/** @type {?} */\nElCheckboxGroup.prototype.controlChange;\n/** @type {?} */\nElCheckboxGroup.prototype.controlTouch;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}