{"version":3,"sources":["../../src/checkbox/checkbox-button.ts"],"names":[],"mappings":"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","file":"checkbox-button.js","sourceRoot":"","sourcesContent":["import {\n  Component, Input, Output, EventEmitter, OnInit,\n  ElementRef, Optional, ViewChild, AfterViewInit, ViewEncapsulation,\n} from '@angular/core';\nimport { ElCheckboxGroup } from './checkbox-group';\nimport { isParentTag, removeNgTag } from '../shared/utils/index';\nimport { SafeStyle, DomSanitizer } from '@angular/platform-browser';\nexport class ElCheckboxButton implements OnInit, AfterViewInit {\n  \n   content: any\n/**\n * @param {?} val\n * @return {?}\n */\nset disabled(val: boolean) {   // todo, is discarded.\n    console.warn('Element Angular: (disabled) is discarded, use [elDisabled] replace it.')\n  }\n   elDisabled: boolean = false\n   label: string\n   model: any\n   indeterminate: boolean = false\n   checked: boolean = false\n   name: string\n   trueLabel: string | number\n   modelChange: EventEmitter<any> = new EventEmitter<any>()\n  \n  labels: any[]\n  parentIsGroup: boolean = false\n  isFocus: boolean = false\n  showLabel: boolean = false\n  // special key\n  size: string\n/**\n * @param {?} hostGroup\n * @param {?} el\n * @param {?} domSanitizer\n */\nconstructor(\nprivate hostGroup: ElCheckboxGroup,\nprivate el: ElementRef,\nprivate domSanitizer: DomSanitizer,\n  ) {\n  }\n/**\n * @return {?}\n */\nactiveStyle(): SafeStyle {\n    if (!this.hostGroup) return this.domSanitizer.bypassSecurityTrustStyle('')\n    const /** @type {?} */ styles: string = `backgroundColor: ${this.hostGroup.fill};` +\n      `borderColor: ${this.hostGroup.fill};color: ${this.hostGroup.textColor};` +\n      `box-shadow: -1px 0 0 0 ${this.hostGroup.fill};`\n    return this.domSanitizer.bypassSecurityTrustStyle(this.checked && !this.elDisabled ? styles : '')\n  }\n/**\n * @return {?}\n */\nisChecked(): boolean {\n    if (this.parentIsGroup) {\n      return this.hostGroup.model.indexOf(this.label) > -1\n    }\n    return this.model\n  }\n/**\n * @param {?} t\n * @return {?}\n */\nchangeHandle(t: boolean): void {\n    this.parentIsGroup && this.hostGroup.updateModelFromChildren(t, this.label)\n    this.model = t\n    this.checked = this.isChecked()\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    const /** @type {?} */ nativeElement = this.el.nativeElement\n    this.parentIsGroup = isParentTag(nativeElement, 'el-checkbox-group')\n    removeNgTag(nativeElement)\n    // update model from group\n    if (this.parentIsGroup) {\n      this.labels = this.hostGroup.model\n      this.size = this.hostGroup.size\n      this.model = this.isChecked()\n      // update handle\n      this.hostGroup.subscriber.push(() => this.model = this.isChecked())\n    }\n    this.checked = this.isChecked()\n  }\n/**\n * @return {?}\n */\nngAfterViewInit(): void {\n    const /** @type {?} */ contentText = this.content && this.content.nativeElement.innerText\n    setTimeout(() => {\n      this.showLabel = !contentText || contentText.length < 1\n    }, 0)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'el-checkbox-button',\n  template: `\n    <label [class]=\"'el-checkbox-button' + (size ? ' el-checkbox-button--' + size : '') \"\n      role=\"checkbox\"\n      [class.is-disabled]=\"elDisabled\" [class.is-focus]=\"isFocus\"\n      [class.is-indeterminate]=\"indeterminate\" [class.is-checked]=\"checked\">\n      <input class=\"el-checkbox-button__original\" type=\"checkbox\"\n        [disabled]=\"elDisabled\" [value]=\"label\" [name]=\"name\"\n        [ngModel]=\"model\" (ngModelChange)=\"changeHandle($event)\"\n        (focus)=\"isFocus = true\" (blur)=\"isFocus = false\">\n      <span class=\"el-checkbox-button__inner\"\n        [style]=\"activeStyle()\">\n        <ng-container *ngIf=\"showLabel\">{{label}}</ng-container>\n        <span *ngIf=\"!showLabel\" #content>\n          <ng-content></ng-content>\n        </span>\n      </span>\n    </label>\n  `,\n  encapsulation: ViewEncapsulation.None,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElCheckboxGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: DomSanitizer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'content': [{ type: ViewChild, args: ['content', ] },],\n'disabled': [{ type: Input },],\n'elDisabled': [{ type: Input },],\n'label': [{ type: Input },],\n'model': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n'checked': [{ type: Input },],\n'name': [{ type: Input },],\n'trueLabel': [{ type: Input, args: ['true-label', ] },],\n'modelChange': [{ type: Output },],\n};\n}\n\nfunction ElCheckboxButton_tsickle_Closure_declarations() {\n/** @type {?} */\nElCheckboxButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nElCheckboxButton.ctorParameters;\n/** @type {?} */\nElCheckboxButton.propDecorators;\n/** @type {?} */\nElCheckboxButton.prototype.content;\n/** @type {?} */\nElCheckboxButton.prototype.elDisabled;\n/** @type {?} */\nElCheckboxButton.prototype.label;\n/** @type {?} */\nElCheckboxButton.prototype.model;\n/** @type {?} */\nElCheckboxButton.prototype.indeterminate;\n/** @type {?} */\nElCheckboxButton.prototype.checked;\n/** @type {?} */\nElCheckboxButton.prototype.name;\n/** @type {?} */\nElCheckboxButton.prototype.trueLabel;\n/** @type {?} */\nElCheckboxButton.prototype.modelChange;\n/** @type {?} */\nElCheckboxButton.prototype.labels;\n/** @type {?} */\nElCheckboxButton.prototype.parentIsGroup;\n/** @type {?} */\nElCheckboxButton.prototype.isFocus;\n/** @type {?} */\nElCheckboxButton.prototype.showLabel;\n/** @type {?} */\nElCheckboxButton.prototype.size;\n/** @type {?} */\nElCheckboxButton.prototype.hostGroup;\n/** @type {?} */\nElCheckboxButton.prototype.el;\n/** @type {?} */\nElCheckboxButton.prototype.domSanitizer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}